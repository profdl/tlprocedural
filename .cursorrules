# ================================
# PROJECT TECH STACK RULES
# ================================

# React Best Practices
- Use functional components with hooks exclusively
- Prefer TypeScript for all new components and type safety
- Use proper prop destructuring and TypeScript interfaces
- Implement error boundaries for production reliability
- Follow React naming conventions (PascalCase for components)
- Use React.memo for expensive components
- Implement proper dependency arrays in useEffect
- Avoid inline object/function creation in JSX renders
- Use useMemo and useCallback appropriately for performance

# Code Style Standards
- Use 2 spaces for indentation consistently
- Prefer const/let over var
- Use arrow functions for consistency
- Include JSDoc comments for complex functions
- Follow consistent import ordering: external libs, internal components, types
- Use descriptive variable names that explain intent
- Implement proper error handling with try/catch blocks

# File Organization
- One component per file with matching filename
- Use index.js files for barrel exports
- Keep components in /components directory structure
- Separate custom hooks into /hooks directory
- Place utilities in /utils directory
- Store types in /types directory
- Organize tests alongside components

# ================================
# TLDRAW INTEGRATION RULES
# ================================

# tldraw Core Patterns
- This project uses tldraw for drawing/diagramming functionality
- Follow tldraw's React patterns and built-in conventions
- Use tldraw's native components and hooks over custom implementations
- Reference tldraw SDK documentation for all API methods
- Prefer tldraw's built-in state management system

# tldraw Implementation Guidelines
- Use Editor instance for all programmatic drawing operations
- Implement custom shapes by extending BaseBoxShapeUtil properly
- Use tldraw's event system for user interactions
- Implement proper shape validation and error handling
- Use tldraw's built-in undo/redo system
- Handle tldraw's async operations with proper loading states

# Documentation References
- @tldraw-sdk.txt contains complete SDK reference - always check this first
- @tldraw-examples.txt contains proven implementation patterns
- When suggesting tldraw code, reference these files for accuracy
- Ask user to provide these files if they're missing from context

# ================================
# SUPABASE INTEGRATION RULES
# ================================

# Database Operations
- Use Supabase client for all database operations
- Follow Supabase's React patterns with proper query hooks
- Implement comprehensive RLS (Row Level Security) policies
- Use Supabase Auth for all authentication flows
- Prefer Supabase's built-in functions over custom API endpoints
- Always handle loading, error, and success states for database queries

# Real-time and Performance
- Use Supabase's real-time subscriptions for live data updates
- Implement proper TypeScript types for database schemas
- Use Supabase's edge functions for serverless operations
- Follow Supabase naming conventions for tables and columns
- Optimize queries with proper indexing and filtering
- Handle offline states gracefully with local state management

# Authentication and Security
- Implement proper session management with Supabase Auth
- Use RLS policies for data access control
- Handle authentication state changes properly
- Implement secure password reset and email verification flows
- Use Supabase's built-in user management features

# ================================
# VITE BUILD TOOL RULES
# ================================

# Vite Development Patterns
- Use Vite's fast HMR (Hot Module Replacement) for development
- Leverage Vite's native ES modules in development
- Use Vite's built-in TypeScript support without additional configuration
- Implement proper environment variable handling with VITE_ prefix
- Use Vite plugins for additional functionality (React, PWA, etc.)
- Optimize imports for Vite's tree-shaking capabilities

# Vite Build Optimization
- Use dynamic imports for code splitting and lazy loading
- Implement proper chunk splitting for optimal bundle sizes
- Use Vite's built-in asset handling for images, fonts, etc.
- Configure proper build output for production deployment
- Use Vite's rollup options for advanced build customization
- Implement proper source map configuration for debugging

# Vite Configuration Best Practices
- Keep vite.config.js clean and well-organized
- Use proper plugin ordering for compatibility
- Configure proper dev server settings for local development
- Set up proper proxy configuration for API calls during development
- Use Vite's built-in CSS preprocessing capabilities
- Configure proper base path for deployment environments

# Asset Management with Vite
- Use Vite's asset imports for static files
- Implement proper public folder usage for static assets
- Use Vite's built-in image optimization features
- Configure proper asset inlining thresholds
- Use Vite's CSS code splitting for better performance

# ================================
# NETLIFY DEPLOYMENT RULES
# ================================

# Build and Deployment
- Build optimized for Netlify's CDN using Vite's production build
- Use Netlify Functions for serverless backend logic
- Configure Vite build output to match Netlify's expected structure
- Implement proper environment variable handling (VITE_ prefix for client-side)
- Use Netlify's branch deploys for testing and preview
- Configure proper redirects in _redirects file for SPA routing
- Use Netlify Forms for form submissions when appropriate
- Ensure Vite's build output is properly configured for Netlify deployment

# Performance Optimization
- Implement proper asset optimization for Netlify CDN
- Use Netlify's build plugins for optimization
- Configure proper caching headers
- Implement lazy loading for large assets
- Use Netlify's image optimization features

# ================================
# INTEGRATION PATTERNS
# ================================

# Cross-Platform Integration
- tldraw drawings should persist to Supabase database with proper schema
- Use Supabase real-time for collaborative tldraw features
- Deploy tldraw assets optimally for Netlify CDN delivery
- Handle offline states gracefully across all platforms
- Use environment variables for Supabase keys in Netlify deployment
- Implement proper error boundaries that work across all integrations

# Data Flow Patterns
- User interactions with tldraw should trigger Supabase updates
- Real-time collaboration should use Supabase's real-time features
- All persistent data should go through Supabase with proper validation
- Static assets should be optimized for Netlify's CDN
- Authentication state should be managed centrally through Supabase

# ================================
# PERFORMANCE AND TESTING
# ================================

# Performance Guidelines
- Implement proper loading states for all async operations
- Use React Suspense for component lazy loading
- Implement proper error boundaries at appropriate levels
- Use performance monitoring and optimization techniques
- Implement proper caching strategies

# Testing Standards
- Write unit tests for all custom hooks and utility functions
- Test React components with proper mocking of external dependencies
- Test tldraw integrations with proper shape and editor mocking
- Test Supabase integrations with proper database mocking
- Implement end-to-end tests for critical user flows